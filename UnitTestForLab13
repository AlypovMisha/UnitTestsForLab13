using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections;
using System.IO;
using Лабораторная_13;

namespace UnitTestProject4
{
    [TestClass]
    public class JournalEntryTests
    {
        [TestMethod]
        public void Test_JournalEntry_Constructor_SetsPropertiesCorrectly()
        {
            // Arrange
            string collectionName = "Test Collection";
            string changeType = "Add";
            string changedItem = "Toyota";

            // Act
            var entry = new JournalEntry(collectionName, changeType, changedItem);

            // Assert
            Assert.AreEqual(collectionName, entry.CollectionName);
            Assert.AreEqual(changeType, entry.ChangeType);
            Assert.AreEqual(changedItem, entry.ChangedItem);
        }

        [TestMethod]
        public void Test_JournalEntry_ToString_ReturnsCorrectString()
        {
            // Arrange
            string collectionName = "Test Collection";
            string changeType = "Add";
            string changedItem = "Toyota";

            // Act
            var entry = new JournalEntry(collectionName, changeType, changedItem);
            string expected = $"{collectionName} - тип изменения: {changeType}, измененный элемент: {changedItem}";

            // Assert
            Assert.AreEqual(expected, entry.ToString());
        }
    }

    [TestClass]
    public class JournalTests
    {
        private Journal journal;

        [TestInitialize]
        public void Setup()
        {
            journal = new Journal();
        }

        [TestMethod]
        public void Test_AddEntry_AddsEntryToJournal()
        {
            // Arrange
            string collectionName = "Test Collection";
            string changeType = "Add";
            string changedItem = "Toyota";
            var args = new CollectionHandlerEventArgs(collectionName, changeType, changedItem);

            // Act
            journal.AddEntry(this, args);

            // Assert
            Assert.AreEqual(1, journal.entries.Count);
            Assert.AreEqual(collectionName, journal.entries[0].CollectionName);
            Assert.AreEqual(changeType, journal.entries[0].ChangeType);
            Assert.AreEqual(changedItem, journal.entries[0].ChangedItem);
        }

        [TestMethod]
        public void Test_PrintJournal_PrintsAllEntries()
        {
            // Arrange
            var entry1 = new JournalEntry("Test Collection", "Add", "Toyota");
            var entry2 = new JournalEntry("Test Collection", "Remove", "Honda");
            journal.entries.Add(entry1);
            journal.entries.Add(entry2);

            // Act & Assert
            using (var sw = new StringWriter())
            {
                Console.SetOut(sw);
                journal.PrintJournal();
                string result = sw.ToString();

                Assert.IsTrue(result.Contains(entry1.ToString()));
                Assert.IsTrue(result.Contains(entry2.ToString()));
            }
        }
    }

    [TestClass]
    public class CollectionHandlerEventArgsTests
    {
        [TestMethod]
        public void Test_Constructor_SetsPropertiesCorrectly()
        {
            // Arrange
            string changeType = "Add";
            object changedItem = "Toyota";
            string collectionName = "Test Collection";

            // Act
            var args = new CollectionHandlerEventArgs(changeType, changedItem, collectionName);

            // Assert
            Assert.AreEqual(changeType, args.ChangeType);
            Assert.AreEqual(changedItem, args.ChangedItem);
            Assert.AreEqual(collectionName, args.CollectionName);
        }

        [TestMethod]
        public void Test_ToString_ReturnsCorrectString()
        {
            // Arrange
            string changeType = "Add";
            object changedItem = "Toyota";
            string collectionName = "Test Collection";
            var args = new CollectionHandlerEventArgs(changeType, changedItem, collectionName);
            string expected = $"{collectionName} - Тип изменения: {changeType}, Измененный элемент: {changedItem}";

            // Act
            string result = args.ToString();

            // Assert
            Assert.AreEqual(expected, result);
        }

        [TestMethod]
        public void Test_ChangeType_SetAndGet()
        {
            // Arrange
            var args = new CollectionHandlerEventArgs("Add", "Toyota", "Test Collection");

            // Act
            args.ChangeType = "Remove";

            // Assert
            Assert.AreEqual("Remove", args.ChangeType);
        }

        [TestMethod]
        public void Test_ChangedItem_SetAndGet()
        {
            // Arrange
            var args = new CollectionHandlerEventArgs("Add", "Toyota", "Test Collection");

            // Act
            args.ChangedItem = "Honda";

            // Assert
            Assert.AreEqual("Honda", args.ChangedItem);
        }

        [TestMethod]
        public void Test_CollectionName_SetAndGet()
        {
            // Arrange
            var args = new CollectionHandlerEventArgs("Add", "Toyota", "Test Collection");

            // Act
            args.CollectionName = "New Collection";

            // Assert
            Assert.AreEqual("New Collection", args.CollectionName);
        }
    }

    [TestClass]
    public class MyObservableCollectionTests
    {
        private MyObservableCollection<Cars> collection;

        [TestInitialize]
        public void Setup()
        {
            collection = new MyObservableCollection<Cars>("Test Collection");
        }

        [TestMethod]
        public void Test_Add_InvokesCollectionCountChangedEvent()
        {
            // Arrange
            bool eventInvoked = false;
            collection.CollectionCountChanged += (source, args) => eventInvoked = true;
            var car = new Cars { Brand = "Toyota", Id = 1 };

            // Act
            collection.Add(car);

            // Assert
            Assert.IsTrue(eventInvoked);
            Assert.IsTrue(collection.Contains(car));
        }

        [TestMethod]
        public void Test_Remove_InvokesCollectionCountChangedEvent()
        {
            // Arrange
            var car = new Cars { Brand = "Toyota", Id = 1 };
            collection.Add(car);
            bool eventInvoked = false;
            collection.CollectionCountChanged += (source, args) => eventInvoked = true;

            // Act
            collection.Remove(car);

            // Assert
            Assert.IsTrue(eventInvoked);
            Assert.IsFalse(collection.Contains(car));
        }

        [TestMethod]
        public void Test_IndexerSet_InvokesCollectionReferenceChangedEvent()
        {
            // Arrange
            var car = new Cars { Brand = "Toyota", Id = 1 };
            collection.Add(car);
            bool eventInvoked = false;
            collection.CollectionReferenceChanged += (source, args) => eventInvoked = true;

            // Act
            collection[0] = new Cars { Brand = "Honda", Id = 2 };

            // Assert
            Assert.IsTrue(eventInvoked);
        }

        [TestMethod]
        public void Test_Add_AddsItemToCollection()
        {
            // Arrange
            var car = new Cars { Brand = "Toyota", Id = 1 };

            // Act
            collection.Add(car);

            // Assert
            Assert.IsTrue(collection.Contains(car));
            Assert.AreEqual(1, collection.Count);
        }

        [TestMethod]
        public void Test_Remove_RemovesItemFromCollection()
        {
            // Arrange
            var car = new Cars { Brand = "Toyota", Id = 1 };
            collection.Add(car);

            // Act
            bool removed = collection.Remove(car);

            // Assert
            Assert.IsTrue(removed);
            Assert.IsFalse(collection.Contains(car));
            Assert.AreEqual(0, collection.Count);
        }

        [TestMethod]
        [ExpectedException(typeof(IndexOutOfRangeException))]
        public void Test_IndexerGet_InvalidIndexThrowsException()
        {
            // Act
            var car = collection[0];
        }

        [TestMethod]
        public void Test_IndexerGet_ReturnsCorrectItem()
        {
            // Arrange
            var car = new Cars { Brand = "Toyota", Id = 1 };
            collection.Add(car);

            // Act
            var result = collection[0];

            // Assert
            Assert.AreEqual(car, result);
        }

        [TestMethod]
        public void Test_CollectionName_SetAndGet()
        {
            // Act
            collection.CollectionName = "New Collection";

            // Assert
            Assert.AreEqual("New Collection", collection.CollectionName);
        }

        [TestMethod]
        public void Test_OnCollectionCountChanged_InvokesEvent()
        {
            // Arrange
            bool eventInvoked = false;
            collection.CollectionCountChanged += (source, args) => eventInvoked = true;
            var car = new Cars { Brand = "Toyota", Id = 1 };

            // Act
            collection.Add(car);

            // Assert
            Assert.IsTrue(eventInvoked);
        }

        [TestMethod]
        public void Test_OnCollectionReferenceChanged_InvokesEvent()
        {
            // Arrange
            var car = new Cars { Brand = "Toyota", Id = 1 };
            collection.Add(car);
            bool eventInvoked = false;
            collection.CollectionReferenceChanged += (source, args) => eventInvoked = true;

            // Act
            collection[0] = new Cars { Brand = "Honda", Id = 2 };

            // Assert
            Assert.IsTrue(eventInvoked);
        }
    }
}
